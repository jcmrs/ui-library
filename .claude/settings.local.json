{
  "permissions": {
    "allow": [
      "mcp__serena__get_current_config",
      "mcp__serena__check_onboarding_performed",
      "WebFetch(domain:github.com)",
      "Bash(git init:*)",
      "Bash(git flow init:*)",
      "Bash(mkdir:*)",
      "Bash(git clone:*)",
      "Bash(test:*)",
      "Bash(cat:*)",
      "mcp__serena__activate_project",
      "mcp__serena__onboarding",
      "Bash(where:*)",
      "Bash(bun --version:*)",
      "mcp__serena__write_memory",
      "mcp__serena__list_memories",
      "Bash(for dir in */)",
      "Bash(do echo \"=== $dir%/ ===\")",
      "Bash(ls:*)",
      "Bash(done)",
      "Bash(for dir in UPSTREAM/agents/plugins/*/)",
      "Bash(do echo \"=== $dir ===\")",
      "Bash(git remote add:*)",
      "Bash(git push:*)",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\ndocs: Add Phase 1.0 automation infrastructure documentation\n\nAdded comprehensive documentation suite for git workflow automation,\ndisaster recovery, and session state management - foundational\nrequirements identified through multi-role analysis.\n\nNew Documentation:\n- .docs/GIT-WORKFLOW.md - Automated git workflow for Claude Code\n- .docs/DISASTER-RECOVERY.md - Recovery procedures for all failure scenarios\n- .docs/SESSION-STATE.md - Session state management and persistence\n- .docs/ADR.md - Architecture decision records (12 decisions)\n\nUpdated Documentation:\n- .docs/ROADMAP.md - Added Phase 1.0 before Phase 1.1\n- .docs/TASKS.md - Added Phase 1.0 task breakdown (14 tasks)\n\nProject Files:\n- .gitignore - Standard ignores for Node.js, IDE, dependencies\n- CLAUDE.md - Project instructions for Claude Code\n\nContext:\nMulti-role analysis (DevOps, AI Systems, SRE, DX, Recovery Specialist)\nrevealed automation is not a feature but foundational requirement.\nClaude Code cannot maintain git/process discipline manually.\n\nPhase 1.0 provides:\n- Zero git knowledge required by Claude Code\n- Automatic checkpointing after each task\n- Session state persistence across conversations\n- One-command recovery from failures\n- Remote backup synchronization\n\nStatus: Documentation complete, implementation next\nEOF\n)\")",
      "Bash(bash:*)",
      "Bash(git commit:*)",
      "mcp__github__list_pull_requests",
      "Bash(npm install)",
      "Bash(git tag:*)",
      "Bash(chmod:*)",
      "Bash(npm run prettier:*)",
      "Bash(npm run type-check:*)",
      "Bash(npm run lint:check:*)",
      "Bash(node scripts/session-state/writer.ts:*)",
      "Bash(npm test)",
      "Bash(npm install:*)",
      "Bash(git fetch:*)",
      "Bash(git branch:*)",
      "Bash(git config:*)",
      "Read(//c/Users/jcmei/.claude/**)",
      "Bash(git ls-tree:*)",
      "Bash(npx husky init)",
      "Bash(git reset:*)",
      "Bash(git checkout:*)",
      "Bash(git merge:*)",
      "Bash(awk:*)",
      "mcp__serena__read_memory",
      "mcp__serena__list_dir",
      "Bash(git restore:*)",
      "mcp__serena__search_for_pattern",
      "mcp__serena__find_symbol",
      "Bash(find:*)",
      "mcp__serena__think_about_collected_information",
      "SlashCommand(/commit)",
      "Bash(for hook in .husky/*)",
      "Bash(do if [ -f \"$hook\" ])",
      "Bash([ ! \"$hook\" = \".husky/_\" ])",
      "Bash(then echo \"=== $hook ===\")",
      "Bash(fi)",
      "Bash(npm run test:*)",
      "Bash(node scripts/monitor-git-status.js:*)",
      "Bash(node scripts/monitor-git-status.cjs:*)",
      "Bash(git rm:*)",
      "Bash(node -e:*)",
      "Bash(/dev/null)",
      "Bash(tee:*)",
      "Bash(git show:*)",
      "Bash(npm run storybook:*)",
      "Bash(npx prettier:*)"
    ],
    "deny": [],
    "ask": []
  }
}
