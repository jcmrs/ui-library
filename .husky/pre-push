# Pre-push Hook
# Creates automatic checkpoint before pushing to remote
# See ADR-011 for rationale

echo "🏷️  Creating checkpoint before push..."

# Get current branch
BRANCH=$(git branch --show-current)

# Get current commit
COMMIT=$(git rev-parse HEAD)

# Get short commit hash for tag
SHORT_HASH=$(git rev-parse --short HEAD)

# Create timestamp for tag
TIMESTAMP=$(date +"%Y%m%d-%H%M%S" 2>/dev/null || node -e "const d = new Date(); console.log(d.toISOString().replace(/[-:]/g, '').split('.')[0].replace('T', '-'))")

# Create checkpoint tag
TAG_NAME="checkpoint-${TIMESTAMP}-${SHORT_HASH}"

# Check if tag already exists
if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
  echo "  ⚠ Checkpoint tag already exists: $TAG_NAME"
else
  # Create lightweight checkpoint tag
  git tag "$TAG_NAME" "$COMMIT" 2>/dev/null || true
  echo "  ✓ Checkpoint created: $TAG_NAME"

  # Update session state with checkpoint tag
  node -e "
  const fs = require('fs');
  const path = '.claude/session-state.json';

  try {
    if (fs.existsSync(path)) {
      const state = JSON.parse(fs.readFileSync(path, 'utf8'));

      // Update checkpoint tag
      if (state.checkpoint) {
        state.checkpoint.tag = '$TAG_NAME';
      }

      // Update metadata
      if (state.metadata) {
        state.metadata.last_updated_by = 'pre-push hook';
        state.metadata.last_updated_at = new Date().toISOString();
      }

      fs.writeFileSync(path, JSON.stringify(state, null, 2));
      console.log('  ✓ Session state updated with checkpoint tag');
    }
  } catch (err) {
    // Non-blocking - hook continues even if update fails
    console.log('  ⚠ Could not update session state:', err.message);
  }
  " 2>/dev/null || echo "  ⚠ Session state update skipped"
fi

echo "✅ Pre-push checkpoint complete"
